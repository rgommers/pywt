name: Build Wheels and Release
on:
  push:
    tags:
      - 'v*'
      - 'buildwheels*'
    branches:
      - 'mesonwheels'

env:
  CIBW_BUILD_VERBOSITY: 2
  # CIBW_BEFORE_BUILD: pip install cython
  CIBW_TEST_REQUIRES: pytest
  CIBW_TEST_COMMAND: pytest --pyargs pywt
  CIBW_ENVIRONMENT: PIP_PREFER_BINARY=1


jobs:
  build_macos_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cibw_python: [ "cp38-*", "cp39-*", "cp310-*" , "cp311-*" ]
        cibw_arch: [ "x86_64", "arm64"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels for CPython (MacOS)
        run: |
          # We need to set both MACOS_DEPLOYMENT_TARGET and MACOSX_DEPLOYMENT_TARGET
          # until there is a new release with this commit:
          # https://github.com/mesonbuild/meson-python/pull/309 (should be in 0.13.0)
          if [[ "$CIBW_ARCHS_MACOS" == arm64 ]]; then
              export MACOSX_DEPLOYMENT_TARGET=11.0
              export MACOS_DEPLOYMENT_TARGET=11.0
          else
              export MACOSX_DEPLOYMENT_TARGET=10.13
              export MACOS_DEPLOYMENT_TARGET=10.13
          fi
          echo MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}

          python -m cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  build_windows_wheels:
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        cibw_arch: ["AMD64", "x86"]
        cibw_python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build Windows wheels for CPython
        # To avoid "LINK : fatal error LNK1158: cannot run 'rc.exe'"
        # we explicitly add rc.exe to path using the method from:
        # https://github.com/actions/virtual-environments/issues/294#issuecomment-588090582
        # with additional -arch=amd64 flag to vsdevcmd.bat
        run: |
          if [[ "$CIBW_ARCH" == "AMD64" ]]; then
            function Invoke-VSDevEnvironment {
              $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
                $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
                $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
              & "${env:COMSPEC}" /s /c "`"$Command`" -arch=amd64 -no_logo && set" | Foreach-Object {
                    if ($_ -match '^([^=]+)=(.*)') {
                        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                    }
                }
            }
          elif [[ "$CIBW_ARCH" == "x86" ]]; then
            # Same, but without `-arch=amd64` (`x86` is the default)
            function Invoke-VSDevEnvironment {
              $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
                $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
                $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
              & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                    if ($_ -match '^([^=]+)=(.*)') {
                        [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                    }
                }
          fi

          Invoke-VSDevEnvironment
          Get-Command rc.exe | Format-Table -AutoSize

          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCH: ${{ matrix.cibw_arch }}

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

